[
    {
        "id": "ws15_dart_q0",
        "type": "multiple-select",
        "category": "conceptual",
        "text": "Select all the correct statements about static compiled low‑level programs, specifically, Dart:",
        "options": [
            { "text": "The data types are declared in statically typed languages to prevent common errors like values being out of the desired range.", "id": "ws15_dart_q0_opt0" },
            { "text": "The Dart SDK includes tools like a compiler, a debugger, the Dart shell and a package manager.", "id": "ws15_dart_q0_opt1" },
            { "text": "Every Dart file needs to have a main function.", "id": "ws15_dart_q0_opt2" },
            { "text": "The Dart compiler will throw an error if a value assigned to a variable does not match its declared type.", "id": "ws15_dart_q0_opt3" },
            { "text": "The reason ~/ is used for integer division in Dart instead of // is that the latter is reserved for in‑line comments.", "id": "ws15_dart_q0_opt4" },
            { "text": "There is no need to use curly brackets ({}) in Dart when string interpolating values or variables.", "id": "ws15_dart_q0_opt5" }
        ],
        "correctAnswers": ["ws15_dart_q0_opt0", "ws15_dart_q0_opt1", "ws15_dart_q0_opt3", "ws15_dart_q0_opt4"],
        "explanation": "1. Static typing helps catch type errors early. 2. The Dart SDK is comprehensive. 3. Only executable Dart programs require a `main()` entry point; libraries do not. 4. Dart's static type checking enforces type compatibility. 5. `//` is for single-line comments in Dart, and `~/` performs truncating division. 6. Curly braces are required for expressions (`${expression}`) and for disambiguation (`${variable}text`)."
    },
    {
        "id": "ws15_dart_q1",
        "type": "multiple-select",
        "category": "conceptual",
        "text": "What are the characteristics of interpreted languages? Select all that apply.",
        "options": [
            { "text": "They require an interpreter at runtime.", "id": "ws15_dart_q1_opt0" },
            { "text": "They are generally slower than compiled languages.", "id": "ws15_dart_q1_opt1" },
            { "text": "They cannot be used for cross‑platform application development.", "id": "ws15_dart_q1_opt2" },
            { "text": "They are primarily used for scripting or high‑level programming.", "id": "ws15_dart_q1_opt3" },
            { "text": "We cannot specify the data types of variables in interpreted code.", "id": "ws15_dart_q1_opt4" }
        ],
        "correctAnswers": ["ws15_dart_q1_opt0", "ws15_dart_q1_opt1", "ws15_dart_q1_opt3"],
        "explanation": "Interpreted languages execute code line-by-line at runtime via an interpreter, which is generally slower than running pre-compiled code. They are often used for scripting. Many are cross-platform (e.g., Python, JavaScript). Some interpreted languages support type specifications or hints."
    },
    {
        "id": "ws15_dart_q2",
        "type": "multiple-select",
        "category": "conceptual",
        "text": "Which of the following statements about compiled languages is true? Select all that apply.",
        "options": [
            { "text": "The “build” step to run a compiled language is faster than that of an interpreted language.", "id": "ws15_dart_q2_opt0" },
            { "text": "Scripts written in compiled languages are directly executed by the operating system, resulting in faster performance.", "id": "ws15_dart_q2_opt1" },
            { "text": "Compiled languages require a piece of software that translates and runs the code line by line.", "id": "ws15_dart_q2_opt2" },
            { "text": "Compiled languages are primarily used for building apps or graphical user interfaces.", "id": "ws15_dart_q2_opt3" },
            { "text": "Dart code can either be compiled to JavaScript code for the browser or an executable that can be run without an interpreter.", "id": "ws15_dart_q2_opt4" }
        ],
        "correctAnswers": ["ws15_dart_q2_opt1", "ws15_dart_q2_opt3", "ws15_dart_q2_opt4"],
        "explanation": "Compiled languages translate code to machine code before execution, enabling direct OS execution for faster performance, suitable for apps and GUIs. Dart compiles to native or JavaScript. The build step itself takes time. Interpreters (not compilers) run code line by line."
    },
    {
        "id": "ws15_dart_q3",
        "type": "multiple-select",
        "category": "conceptual",
        "text": "Which of these is a valid way to declare a string variable in Dart? Select all that apply.",
        "options": [
            { "text": "`string name = \"Ayodeji\";`", "id": "ws15_dart_q3_opt0" },
            { "text": "`String name = 'Ayodeji';`", "id": "ws15_dart_q3_opt1" },
            { "text": "`var name = Ayodeji;`", "id": "ws15_dart_q3_opt2" },
            { "text": "`name = 'Ayodeji';`", "id": "ws15_dart_q3_opt3" },
            { "text": "`String name == \"Ayodeji\";`", "id": "ws15_dart_q3_opt4" }
        ],
        "correctAnswers": ["ws15_dart_q3_opt1"],
        "explanation": "`String name = 'Ayodeji';` is a valid explicit declaration. `var name = \"Ayodeji\";` (if an option) would also be valid via type inference. `string` (lowercase) is incorrect. Missing quotes around `Ayodeji` in option 3 makes it an identifier. Option 4 is assignment. Option 5 is comparison."
    },
    {
        "id": "ws15_dart_q4a",
        "type": "multiple-choice",
        "category": "code",
        "text": "What is the output of the following Dart code? Select the correct answer.",
        "code": "double price = 3.5;\nint amount = 2;\nprint('Total: $${price * amount}');",
        "options": [
            { "text": "Total: $3.5 * 2", "correct": false },
            { "text": "Total: $7.0", "correct": true },
            { "text": "Total: 7.0", "correct": false },
            { "text": "Total: $7", "correct": false },
            { "text": "Total: 7", "correct": false },
            { "text": "Error", "correct": false }
        ],
        "explanation": "The expression `price * amount` is `7.0`. The string `'Total: $${price * amount}'` has `$` (literal dollar sign) followed by `${price * amount}` (interpolated value `7.0`). So, output is `Total: $7.0`."
    },
    {
        "id": "ws15_dart_q4b",
        "type": "multiple-choice",
        "category": "code",
        "text": "What will be the output of the following Dart code? Select the correct answer.",
        "code": "int a = 9;\nint b = 2;\na ~/= b;\nb += a;\nprint(a * b);",
        "options": [
            { "text": "24", "correct": true },
            { "text": "2", "correct": false },
            { "text": "18", "correct": false },
            { "text": "20", "correct": false },
            { "text": "16", "correct": false }
        ],
        "explanation": "`a ~/= b` means `a = a ~/ b` (integer division), so `a = 9 ~/ 2` which is `4`. Then `b += a` means `b = b + a`, so `b = 2 + 4` which is `6`. Finally, `print(a * b)` prints `4 * 6 = 24`."
    },
    {
        "id": "ws15_dart_q5",
        "type": "multiple-select",
        "category": "code",
        "text": "The return types of the following functions have not been declared. Select all the correct options:",
        "options": [
            { "text": "`greet` returns a `double`:\n\n```dart\ngreet() {\n  var age = \"20\";\n  return double.parse(age);\n}```", "code": "greet() {\n  var age = \"20\";\n  return double.parse(age);\n}", "id": "ws15_dart_q5_opt0" },
            { "text": "`getANumber` returns a `String`:\n\n```dart\nimport 'dart:io';\ngetANumber() {\n  print('Enter a number:');\n  var a = stdin.readLineSync();\n  return a;\n}```", "code": "import 'dart:io';\ngetANumber() {\n  print('Enter a number:');\n  var a = stdin.readLineSync();\n  return a;\n}", "id": "ws15_dart_q5_opt1" },
            { "text": "`checkEven` returns a `bool`:\n\n```dart\nimport 'dart:io';\ncheckEven() {\n  print('Enter a number:');\n  int num = int.parse(stdin.readLineSync()!); \n  return num % 2 == 0;\n}```", "code": "import 'dart:io';\ncheckEven() {\n  print('Enter a number:');\n  int num = int.parse(stdin.readLineSync()!); \n  return num % 2 == 0;\n}", "id": "ws15_dart_q5_opt2" },
            { "text": "`printName` returns a `String`:\n\n```dart\nimport 'dart:io';\nprintName() {\n  print('Enter your name:');\n  String? name = stdin.readLineSync();\n  print('Hello, ${name!.toUpperCase()}');\n}```", "code": "import 'dart:io';\nprintName() {\n  print('Enter your name:');\n  String? name = stdin.readLineSync();\n  print('Hello, ${name!.toUpperCase()}');\n}", "id": "ws15_dart_q5_opt3" },
            { "text": "`divideNumbers` returns an `int`:\n\n```dart\ndivideNumbers() {\n  int a = 40;\n  int b = 8;\n  return a / b;\n}```", "code": "divideNumbers() {\n  int a = 40;\n  int b = 8;\n  return a / b;\n}", "id": "ws15_dart_q5_opt4" },
            { "text": "`calculateSquareRoot` returns a `double`:\n\n```dart\nimport 'dart:math';\ncalculateSquareRoot() {\n  int num = 5;\n  return sqrt(num);\n}```", "code": "import 'dart:math';\ncalculateSquareRoot() {\n  int num = 5;\n  return sqrt(num);\n}", "id": "ws15_dart_q5_opt5" }
        ],
        "correctAnswers": ["ws15_dart_q5_opt0", "ws15_dart_q5_opt1", "ws15_dart_q5_opt2", "ws15_dart_q5_opt5"],
        "explanation": "1. `double.parse()` returns `double`. 2. `stdin.readLineSync()` returns `String?`. 3. `num % 2 == 0` returns `bool`. 4. `printName` implicitly returns `void`. 5. `/` operator returns `double`. 6. `sqrt()` returns `double`."
    },
    {
        "id": "ws16_dart_q0",
        "type": "multiple-select",
        "category": "conceptual",
        "text": "Select all correct statements when it comes to Dart's functions and control flow:",
        "options": [
            { "text": "The void keyword is used to define functions that return no specific type of data.", "id": "ws16_dart_q0_opt0" },
            { "text": "while loops can only iterate a known number of times (this count must be known before runtime).", "id": "ws16_dart_q0_opt1" },
            { "text": "Dart's null safety feature helps prevent creating variables that can be null.", "id": "ws16_dart_q0_opt2" },
            { "text": "We can cover multiple cases at once in a switch statement.", "id": "ws16_dart_q0_opt3" },
            { "text": "To make (a subset of) a function’s parameters into named parameters, it suffices to add curly brackets ({}) around them.", "id": "ws16_dart_q0_opt4" }
        ],
        "correctAnswers": ["ws16_dart_q0_opt0", "ws16_dart_q0_opt3", "ws16_dart_q0_opt4"],
        "explanation": "1. `void` means no return value. 2. `while` loops iterate based on a condition. 3. Null safety manages nullability. 4. Dart switch allows fall-through or patterns. 5. `{}` defines named parameters."
    },
    {
        "id": "ws16_dart_q1",
        "type": "multiple-select",
        "category": "code",
        "text": "Given the following function definition, select the correct answer.",
        "code": "void greet(String? name) {\n  print(\"Hello, ${name ?? 'stranger'}!\");\n}",
        "options": [
            { "text": "`greet();` prints “Hello, stranger!”", "id": "ws16_dart_q1_opt0" },
            { "text": "`greet(null);` prints “Hello, stranger!”", "id": "ws16_dart_q1_opt1" },
            { "text": "`greet(3);` prints “Hello, stranger!”", "id": "ws16_dart_q1_opt2" },
            { "text": "`greet(\"Aya\");` prints “Hello, Aya!”", "id": "ws16_dart_q1_opt3" },
            { "text": "`greet('')` prints “Output: Hello, stranger!”.", "id": "ws16_dart_q1_opt4" }
        ],
        "correctAnswers": ["ws16_dart_q1_opt0", "ws16_dart_q1_opt1", "ws16_dart_q1_opt3"],
        "explanation": "`name ?? 'stranger'` uses 'stranger' if `name` is null. `greet('')` uses empty string, printing 'Hello, !'. `greet(3)` would cause a compile-time error."
    },
    {
        "id": "ws16_dart_q2",
        "type": "multiple-choice",
        "category": "conceptual",
        "text": "What is the purpose of using List<String> arguments in the main function of a Dart programme? Select the correct answer.",
        "options": [
            { "text": "To specify default values for all functions in the programme.", "correct": false },
            { "text": "To pass a fixed number of required arguments to the main function.", "correct": false },
            { "text": "To receive a list of Strings when the main function is run from other files.", "correct": false },
            { "text": "To receive a list of Strings when the programme is run from the command line.", "correct": true }
        ],
        "explanation": "`main(List<String> arguments)` receives command-line arguments."
    },
    {
        "id": "ws16_dart_q3",
        "type": "multiple-select",
        "category": "code",
        "text": "Which of the following functions can be converted into an arrow function (with minor changes)? Select all that apply.",
        "options": [
            { "text": "```dart\nvoid printNumber() {\n  print(5);\n}```", "code": "void printNumber() {\n  print(5);\n}", "id": "ws16_dart_q3_opt0" },
            { "text": "```dart\nint addNumbers(int a, int b) {\n  return a + b;\n}```", "code": "int addNumbers(int a, int b) {\n  return a + b;\n}", "id": "ws16_dart_q3_opt1" },
            { "text": "```dart\ndouble circleArea(double radius) {\n  print(\"Calculating...\");\n  return pi * pow(radius, 2);\n}```", "code": "import 'dart:math';\ndouble circleArea(double radius) {\n  print(\"Calculating...\");\n  return pi * pow(radius, 2);\n}", "id": "ws16_dart_q3_opt2" },
            { "text": "```dart\nString shout(String message) {\n  String loudMessage = message.toUpperCase();\n  return loudMessage;\n}```", "code": "String shout(String message) {\n  String loudMessage = message.toUpperCase();\n  return loudMessage;\n}", "id": "ws16_dart_q3_opt3" },
            { "text": "```dart\nint triple(int x) {\n  int result = x * 3;\n  return result;\n}```", "code": "int triple(int x) {\n  int result = x * 3;\n  return result;\n}", "id": "ws16_dart_q3_opt4" }
        ],
        "correctAnswers": ["ws16_dart_q3_opt0", "ws16_dart_q3_opt1", "ws16_dart_q3_opt3", "ws16_dart_q3_opt4"],
        "explanation": "Arrow functions are for single expressions. 1: `=> print(5);`. 2: `=> a + b;`. 3: Has two statements. 4: `=> message.toUpperCase();`. 5: `=> x * 3;`."
    },
    {
        "id": "ws16_dart_q4",
        "type": "multiple-choice",
        "category": "code",
        "text": "What will this programme print given 12 and 21 as x and y respectively? Select the correct answer.",
        "code": "if (x > y) {\n  print(1);\n} else if (x < y) {\n  if (x != 10 && y == 20) {\n    print(2);\n  } else {\n    print(3);\n  }\n} else {\n  print(4);\n}",
        "options": [
            { "text": "1", "correct": false },
            { "text": "2", "correct": false },
            { "text": "3", "correct": true },
            { "text": "4", "correct": false }
        ],
        "explanation": "x=12, y=21. `x > y` is false. `x < y` is true. Inner `if (12 != 10 && 21 == 20)` is `(true && false)` -> false. Inner `else` prints 3."
    },
    {
        "id": "ws16_dart_q5",
        "type": "multiple-choice",
        "category": "code",
        "text": "Consider the following Dart while loop; what is the value of a when the loop terminates? Select the correct answer.",
        "code": "int a = 10;\nwhile(a > 5) {\n  a -= 2;\n}",
        "options": [
            { "text": "5", "correct": false },
            { "text": "4", "correct": true },
            { "text": "3", "correct": false },
            { "text": "6", "correct": false }
        ],
        "explanation": "a=10 -> a=8 -> a=6 -> a=4. Loop terminates as 4 is not > 5. `a` is 4."
    },
    {
        "id": "ws16_dart_q6",
        "type": "multiple-choice",
        "category": "code",
        "text": "What is the correct way to write a for loop in Dart that prints numbers 100, 80, 60, 40, 20? Select the correct answer.",
        "options": [
            { "text": "```dart\nfor(int i = 10; i <= 100; i++) {\n  print(i);\n}```", "correct": false },
            { "text": "```dart\nfor(int i = 2; i <= 10; i++) {\n  print(i * 10);\n}```", "correct": false },
            { "text": "```dart\nfor(int i = 2; i <= 10; i = i + 2) {\n  print(i * 10);\n}```", "correct": false },
            { "text": "```dart\nfor(int i = 10; i > 2; i = i - 2) {\n  print(i * 10);\n}```", "correct": false },
            { "text": "```dart\nfor (int i = 100; i >= 0; i -= 20) {\n  print(i);\n}```", "correct": false },
            { "text": "```dart\nfor (int i = 100; i > 0; i = i - 20)  {\n  print(i);\n}```", "correct": true }
        ],
        "explanation": "`for (int i = 100; i > 0; i = i - 20)` prints 100, 80, 60, 40, 20."
    },
    {
        "id": "ws17_dart_q0",
        "type": "multiple-select",
        "category": "conceptual",
        "text": "Select all the true statements about Strings, Lists, Sets, and Maps in Dart:",
        "options": [
            { "text": "The elements inside lists can be modified in runtime but not in compile time.", "id": "ws17_dart_q0_opt0" },
            { "text": "Given this map emojis = {1: '😎', 2: '🤩'}, the assignment emojis[x] = '😍' creates a new element if x is not 1 or 2.", "id": "ws17_dart_q0_opt1" },
            { "text": "List<Object> list = [1, 'two', 3.0]; definition creates an error, as Lists cannot contain elements of different types.", "id": "ws17_dart_q0_opt2" },
            { "text": "The remove method of a List removes all occurrences of the specified element from the list.", "id": "ws17_dart_q0_opt3" },
            { "text": "Inserting '🐒' at index 1 of the list ['🐓', '🐄', '🐖'], will result in ['🐓', '🐄', '🐒',  '🐖'].", "id": "ws17_dart_q0_opt4" },
            { "text": "When iterating over a set using a for‑in loop, the elements are accessed in the order they were inserted.", "id": "ws17_dart_q0_opt5" }
        ],
        "correctAnswers": ["ws17_dart_q0_opt0", "ws17_dart_q0_opt1", "ws17_dart_q0_opt5"],
        "explanation": "1. Lists are mutable. 2. Map assignment adds/updates. 3. `List<Object>` allows mixed types. 4. `List.remove` removes first occurrence. 5. Insertion results in `['🐓', '🐒', '🐄', '🐖']`. 6. Default `Set` (LinkedHashSet) preserves insertion order."
    },
    {
        "id": "ws17_dart_q1",
        "type": "multiple-choice",
        "category": "conceptual",
        "text": "What is the first step of converting the string \"apples_and_pears\" to \"applesAndPears\"? Select the correct answer.",
        "options": [
            { "text": "Use the toUpperCase method on the first letter of the second word.", "correct": false },
            { "text": "Split the string by \"_\" into a List of substrings.", "correct": true },
            { "text": "Reverse the string by first splitting it by \"\".", "correct": false },
            { "text": "Use the contains method to check for underscores.", "correct": false },
            { "text": "Find the location of the first letter of each word in the string with the indexOf method.", "correct": false }
        ],
        "explanation": "First step is to split by the delimiter `_`."
    },
    {
        "id": "ws17_dart_q2",
        "type": "multiple-choice",
        "category": "code",
        "text": "What is the output of print('Flutter'.indexOf('t'))? Select all that apply.",
        "options": [
            { "text": "2", "correct": false },
            { "text": "3", "correct": true },
            { "text": "4", "correct": false },
            { "text": "3 and 4", "correct": false },
            { "text": "2 and 3", "correct": false }
        ],
        "explanation": "`indexOf('t')` finds the first 't' at index 3."
    },
    {
        "id": "ws17_dart_q3",
        "type": "multiple-select",
        "category": "conceptual",
        "text": "Which of the following String methods can be used to locate a substring within a String? Select all that apply.",
        "options": [
            { "text": "startsWith()", "id": "ws17_dart_q3_opt0" },
            { "text": "endsWith()", "id": "ws17_dart_q3_opt1" },
            { "text": "contains()", "id": "ws17_dart_q3_opt2" },
            { "text": "split()", "id": "ws17_dart_q3_opt3" },
            { "text": "join()", "id": "ws17_dart_q3_opt4" },
            { "text": "substring()", "id": "ws17_dart_q3_opt5" }
        ],
        "correctAnswers": ["ws17_dart_q3_opt0", "ws17_dart_q3_opt1", "ws17_dart_q3_opt2"],
        "explanation": "`startsWith`, `endsWith`, and `contains` check for substring presence/position. `indexOf` and `lastIndexOf` also locate."
    },
    {
        "id": "ws17_dart_q4",
        "type": "multiple-select",
        "category": "conceptual",
        "text": "Which of the following is the correct way to define a List of Strings in Dart?",
        "options": [
            { "text": "List<String> colours = List<String>('Red', 'Green', 'Blue');", "id": "ws17_dart_q4_opt0" },
            { "text": "List colours = ['Red', 'Green', 'Blue'];", "id": "ws17_dart_q4_opt1" },
            { "text": "String[] colours = ['Red', 'Green', 'Blue'];", "id": "ws17_dart_q4_opt2" },
            { "text": "List<String> colours = List.filled('Red', 'Green', 'Blue');", "id": "ws17_dart_q4_opt3" },
            { "text": "List<String> colours = ['Red', 'Green', 'Blue'];", "id": "ws17_dart_q4_opt4" }
        ],
        "correctAnswers": ["ws17_dart_q4_opt1", "ws17_dart_q4_opt4"],
        "explanation": "Both `List colours = ...` (inferred) and `List<String> colours = ...` (explicit) are correct with list literals."
    },
    {
        "id": "ws17_dart_q5",
        "type": "multiple-select",
        "category": "code",
        "text": "Which of the following functions correctly adds a given integer to each element of a list and then returns the modified list back to the caller? Select all that apply.",
        "options": [
            { "text": "```dart\nList<int> addToList(List<int> list, int addition) {\n  for (int number in list) {\n    number += addition;\n  }\n  return list;\n}```", "code":"List<int> addToList(List<int> list, int addition) {\n  for (int number in list) {\n    number += addition;\n  }\n  return list;\n}", "id": "ws17_dart_q5_opt0" },
            { "text": "```dart\nList<int> addToList(List<int> list, int addition) {\n  for (int element of list) {\n    element = element + addition;\n  }\n  return list;\n}```", "code":"List<int> addToList(List<int> list, int addition) {\n  for (int element of list) {\n    element = element + addition;\n  }\n  return list;\n}", "id": "ws17_dart_q5_opt1" },
            { "text": "```dart\nList<int> addToList(List<int> list, int addition) {\n  for (int i = 0; i <= list.length; i++) {\n    list[i] += addition;\n  }\n  return list;\n}```", "code":"List<int> addToList(List<int> list, int addition) {\n  for (int i = 0; i <= list.length; i++) {\n    list[i] += addition;\n  }\n  return list;\n}", "id": "ws17_dart_q5_opt2" },
            { "text": "```dart\nList<int> addToList(List<int> list, int addition) {\n  for (int i = 0; i < list.length; i = i + 1) {\n    list[i] = list[i] + addition;\n  }\n  return list;\n}```", "code":"List<int> addToList(List<int> list, int addition) {\n  for (int i = 0; i < list.length; i = i + 1) {\n    list[i] = list[i] + addition;\n  }\n  return list;\n}", "id": "ws17_dart_q5_opt3" }
        ],
        "correctAnswers": ["ws17_dart_q5_opt3"],
        "explanation": "For-in loops modify copies. `i <= list.length` causes RangeError. Indexed loop (4) correctly modifies."
    },
    {
        "id": "ws17_dart_q6",
        "type": "multiple-choice",
        "category": "code",
        "text": "What will happen if the function shown below is called with the Set: {'milkshake', 'pizza', 'banana milk', 'cheesy chips'}? Select the correct answer.",
        "code": "void lactoseIntolerant(Set<String> foods) {\n  for (String food in foods) {\n    if (food.contains('milk')) {\n      foods.remove(food);\n    }\n  }\n  print(foods);\n}",
        "options": [
            { "text": "It will print {'pizza', 'cheesy chips'}", "correct": false },
            { "text": "It will print {'pizza'}", "correct": false },
            { "text": "It will print {'milkshake', 'pizza', 'banana milk', 'cheesy chips'}", "correct": false },
            { "text": "An error will occur during the first iteration of the loop", "correct": true },
            { "text": "The function will enter an infinite loop as there are no 'milk' elements", "correct": false }
        ],
        "explanation": "Modifying a collection during for-in iteration causes `ConcurrentModificationError`."
    },
    {
        "id": "ws17_dart_q7",
        "type": "multiple-select",
        "category": "code",
        "text": "Which of the following removes the second key‑value pair from the Map shown below? Select all that apply.",
        "code": "Map<String, int> scores = {'Dhivyah ': 90, 'ÁLvaro': 85};",
        "options": [
            { "text": "scores.delete('ÁLvaro');", "id": "ws17_dart_q7_opt0" },
            { "text": "scores.remove('ÁLvaro');", "id": "ws17_dart_q7_opt1" },
            { "text": "scores.delete(1);", "id": "ws17_dart_q7_opt2" },
            { "text": "scores.delete(85);", "id": "ws17_dart_q7_opt3" },
            { "text": "scores.remove('ÁLvaro', 85);", "id": "ws17_dart_q7_opt4" },
            { "text": "scores.remove = scores.last;", "id": "ws17_dart_q7_opt5" }
        ],
        "correctAnswers": ["ws17_dart_q7_opt1"],
        "explanation": "`scores.remove('ÁLvaro')` removes by key. `delete` is not a Map method."
    },
    {
        "id": "ws17_dart_q8",
        "type": "multiple-choice",
        "category": "code",
        "text": "What does the following Dart function print? Select the correct answer.",
        "code": "void checkProduct() {\n  Map<String, double> prices = {\n    'Bread': 1.5,\n    'Milk': 1.0,\n    'Eggs': 2.0,\n  };\n  if (prices.containsKey('Egg')) {\n    print('Eggs cost £${prices['Eggs']}');\n  }\n}",
        "options": [
            { "text": "Eggs cost £null", "correct": false },
            { "text": "Eggs cost £2.0", "correct": false },
            { "text": "Eggs cost £${2.0}", "correct": false },
            { "text": "Nothing", "correct": true },
            { "text": "An error occurs", "correct": false }
        ],
        "explanation": "Key 'Egg' (singular) is not in `prices` (which has 'Eggs'). `containsKey` is false."
    },
    {
        "id": "ws18_dart_q0",
        "type": "multiple-select",
        "category": "conceptual",
        "text": "Select all the true statements about Object‑Oriented Programming (OOP) in Dart.",
        "options": [
            { "text": "To create an object in Dart, we have to use the new keyword.", "id": "ws18_dart_q0_opt0" },
            { "text": "The superclass of a class is defined using the extends keyword.", "id": "ws18_dart_q0_opt1" },
            { "text": "The Team class is composed of a list of Player objects, hence it has an instance variable of type List<Player>.", "id": "ws18_dart_q0_opt2" },
            { "text": "If we define an instance variable _password in the User class, we can access it using user._password in another class as long as it is defined in the same file.", "id": "ws18_dart_q0_opt3" },
            { "text": "Getters and setters in Dart do not have parameter lists.", "id": "ws18_dart_q0_opt4" }
        ],
        "correctAnswers": ["ws18_dart_q0_opt1", "ws18_dart_q0_opt2", "ws18_dart_q0_opt3"],
        "explanation": "`new` is optional. `extends` for inheritance. Composition is 'has-a'. `_` for library privacy. Setters have one parameter."
    },
    {
        "id": "ws18_dart_q1",
        "type": "multiple-select",
        "category": "code",
        "text": "Consider the Phone class shown below. Which of the following is the correct way to create a Phone object? Select all that apply.",
        "code": "class Phone {\n  String name;\n  String brand;\n  int memory;\n\n  Phone(this.name, this.brand, {this.memory = 64});\n}",
        "options": [
            { "text": "Phone myPhone = Phone('iPhone 12', 'Apple');", "id": "ws18_dart_q1_opt0" },
            { "text": "Phone myPhone = Phone('iPhone 12', 'Apple', 64);", "id": "ws18_dart_q1_opt1" },
            { "text": "var galaxy = Phone('Galaxy S21', 'Samsung', memory: 128);", "id": "ws18_dart_q1_opt2" },
            { "text": "phone galaxy = Phone(name: 'Galaxy S21', brand: 'Samsung', memory: 128);", "id": "ws18_dart_q1_opt3" },
            { "text": "phone galaxy= Phone('Galaxy S21', 'Samsung', memory: 128)", "id": "ws18_dart_q1_opt4" }
        ],
        "correctAnswers": ["ws18_dart_q1_opt0", "ws18_dart_q1_opt2"],
        "explanation": "Option 1 uses default for `memory`. Option 3 correctly uses named parameter. Option 2 misuses positional for named. 4 & 5 use incorrect type `phone`."
    },
    {
        "id": "ws18_dart_q2",
        "type": "multiple-choice",
        "category": "code",
        "text": "What is the output of the main function shown below? Select the correct answer.",
        "code": "class Rectangle {\n  double width = 0;\n  double height = 0;\n\n  Rectangle(this.width, this.height);\n\n  double getArea() => width * height;\n}\n\nvoid main() {\n  Rectangle myRectangle = Rectangle(3, 4);\n  double area = myRectangle.getArea();\n  print('$area, $myRectangle');\n}",
        "options": [
            { "text": "12, Instance of 'Rectangle'", "correct": false },
            { "text": "12.0, Instance of 'Rectangle'", "correct": true },
            { "text": "12.0, Rectangle", "correct": false },
            { "text": "12, Rectangle object at 0x000001C9081DE9D0", "correct": false },
            { "text": "Error: class 'Rectangle' has no instance variable named 'area'.", "correct": false }
        ],
        "explanation": "`area` is 12.0. Default `toString()` for `myRectangle` is `Instance of 'Rectangle'`."
    },
    {
        "id": "ws18_dart_q3_placeholder",
        "type": "multiple-select",
        "category": "code",
        "text": "Suppose the following BankAccount class is added in a file called lect18.dart and it is imported into main.dart. Which of the following statements is true?",
        "code": "class BankAccount {\n  String accountNumber;\n  double _balance = 0.0;\n\n  BankAccount(this.accountNumber);\n\n  void deposit(double amount) {\n    _balance += amount;\n  }\n\n  double get balance => _balance;\n}",
        "options": [
            { "text": "The deposit method is accessible in main.dart.", "id": "ws18_dart_q3_opt0" },
            { "text": "We can get balance in main.dart.", "id": "ws18_dart_q3_opt1" },
            { "text": "We can set balance in main.dart.", "id": "ws18_dart_q3_opt2" },
            { "text": "We can get _balance in main.dart.", "id": "ws18_dart_q3_opt3" },
            { "text": "We can get _balance in lect18.dart file.", "id": "ws18_dart_q3_opt4" }
        ],
        "correctAnswers": ["ws18_dart_q3_opt0", "ws18_dart_q3_opt1", "ws18_dart_q3_opt4"],
        "explanation": "`deposit` and `balance` getter are public. `_balance` is library-private (accessible in same file/library)."
    },
    {
        "id": "ws18_dart_q4_placeholder",
        "type": "multiple-select",
        "category": "code",
        "text": "Consider the following classes. Which of the following statements is true?",
        "code": "class Animal {\n  String name;\n\n  Animal(this.name);\n\n  void eat() => print('$name is eating.');\n\n  String toString() => name;\n}\n\nclass Dog extends Animal {\n  String breed;\n\n  Dog(String name, this.breed) : super(name);\n\n  void bark() => print('Woof!');\n\n  String toString() => '$name the $breed';\n}",
        "options": [
            { "text": "Only Dog objects have a name instance variable.", "id": "ws18_dart_q4_opt0" },
            { "text": "All Dog objects have a bark method.", "id": "ws18_dart_q4_opt1" },
            { "text": "The toString method in Dog overrides toString of Animal.", "id": "ws18_dart_q4_opt2" },
            { "text": "The super keyword is used to call the eat method in Animal.", "id": "ws18_dart_q4_opt3" },
            { "text": "The Animal class cannot be instantiated (you can only create Dog objects).", "id": "ws18_dart_q4_opt4" }
        ],
        "correctAnswers": ["ws18_dart_q4_opt1", "ws18_dart_q4_opt2"],
        "explanation": "`Dog` inherits `name`. `Dog` defines `bark`. `Dog.toString` overrides. `super` calls `Animal` constructor. `Animal` can be instantiated."
    }
]
